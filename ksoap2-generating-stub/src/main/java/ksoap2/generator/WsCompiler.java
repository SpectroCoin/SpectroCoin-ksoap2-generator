/**
 Ksoap2-generator-stub: the generating to generate web services client using
 ksoap2 (http://ksoap2.sourceforge.net/) in J2ME/CLDC 1.1 and Android
 (http://code.google.com/p/ksoap2-android/).
 
 Copyright: Copyright (C) 2010
 Contact: kinhnc@gmail.com

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
 USA 

 Initial developer(s): Cong Kinh Nguyen.
 Contributor(s):
 */

package ksoap2.generator;

import java.io.File;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import javax.tools.DiagnosticCollector;
import javax.tools.JavaCompiler;
import javax.tools.JavaFileObject;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;
import javax.tools.JavaCompiler.CompilationTask;

/**
 * Class to compile code generated by axis.
 *
 * @author Cong Kinh Nguyen
 *
 */
public final class WsCompiler {
    private static final String COMPILE_ERROR = "Build code: error";
    /**
     * The attribute to store path that code generated by axis stored.
     */
    private String generatedFolder;

    /**
     * The attribute to store path that code generated by axis compiled.
     */
    private String compiledFolder;

    /**
     * Java logger.
     */
    private Logger logger = Logger.getLogger(WsCompiler.class.getName());

    /**
     * Constructor.
     *
     * @param generatedFolder
     *              The generated folder.
     * @param compiledFolder
     *              The compiled folder.
     */
    public WsCompiler(final String generatedFolder,
            final String compiledFolder) {
        this.compiledFolder = compiledFolder;
        this.generatedFolder = generatedFolder;
    }

    public void run() throws GeneratorException {
        Util.checkNull(compiledFolder);
        Util.checkNull(generatedFolder);
        compile(generatedFolder, compiledFolder);
    }

    private void compile(final String sourcepath, final String destpath)
            throws GeneratorException {
        logger.info("compile method");
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        DiagnosticCollector<JavaFileObject> diagnostics =
                new DiagnosticCollector<JavaFileObject>();
        StandardJavaFileManager fileManager = compiler.getStandardFileManager(
                diagnostics, null, null);
        Iterable<? extends JavaFileObject> compilationUnits = fileManager
                .getJavaFileObjectsFromStrings(FileManager.getFileNames(
                        sourcepath));
        List<String> options = new ArrayList<String>();
        options.add("-classpath");
        StringBuilder sb = new StringBuilder();
        URLClassLoader urlClassLoader = (URLClassLoader) Thread.currentThread()
                .getContextClassLoader();
        for (URL url : urlClassLoader.getURLs()) {
                sb.append(url.getFile()).append(File.pathSeparator);
        }
        logger.info("libraries: " + sb.toString());
        options.add(sb.toString());
        options.add("-d");
        options.add(destpath);
        options.add("-g:vars");
        options.add("-nowarn");
        CompilationTask task = compiler.getTask(null, fileManager, null ,
                options, null, compilationUnits);
        boolean success = task.call();
        if (!success) {
            throw new GeneratorException(COMPILE_ERROR);
        }
    }
}
